package fracCalc;
public class Fraction{
	//Variables to be used throughout.
	private int numerator;
	private int denominator;
	private int whole;
	private int[] storeNum = new int[2];
	//Constructor
	public Fraction(String input) {
    	int breakPoint = 0;
    /* Checks for backslashes and underscores
     * to identify if it is a proper fraction,
     * and is further parsed and separated into
     * this statements to be calculated.
     */
    if(input.length() != 0 && input.indexOf("_") == -1) {
    	if(input.indexOf("/") == -1) {
    	//If the input string does not have the backslash, it will be a whole number
    			this.numerator = 0;
    			this.denominator =1;
    			this.whole = Integer.parseInt(input.substring(0,input.length()));
    	}else{
    	//In a normal case, the input will be a fraction and will have to be separated by indexes.
   				this.numerator =Integer.parseInt(input.substring(0, input.indexOf("/")));
   				this.denominator =Integer.parseInt(input.substring(input.indexOf("/") + 1,input.length()));
   				this.whole = 0;
   			}
    	}else{
    	//Backslashes and underscores are respectively cut into different pieces for further storage.
    		for(int j = 0;j < input.length(); j ++) {
    			if(input.charAt(j) == '_') {
    				//Breakpoint is determined when the underscore comes out.
    				//Everything before is the whole number.
    				this.whole = Integer.parseInt(input.substring(0, j));
    				breakPoint = j;
    			}
    			if(input.charAt(j) == '/') {
    			//The slash determines what is the numerator and the denominator.
    				this.numerator = Integer.parseInt(input.substring(breakPoint + 1,j));
    				this.denominator = Integer.parseInt(input.substring(j + 1,input.length()));
    			}
    		}
    	}
  		//Checks if the whole number is negative.
       	if(this.whole > 0) {
       		storeNum[0] = this.whole * this.denominator + this.numerator;
        }else if(this.whole == 0){
       		storeNum[0] = this.numerator;
       	}else{
       		storeNum[0] = this.whole * this.denominator - this.numerator;
       	}
       	storeNum[1] = this.denominator;
   	}
	//Getter
	public int[] getInfo(){
		return storeNum;
	}
	//Addition method, also covers subtraction.
    public static String add(int[] input1, int[] input2,String operator) {
    	//Multiplies second term to negative 1 and then adds to simplify method.
    	if(operator.equals("-")) {
    		input2[0] *= -1;
    	}
    	if(input1[1] != input2[1]) {
    		//Temporarily stored.
    		int temp = input1[1];
    		input1[1] *= input2[1];
    		input1[0] *= input2[1];
    		input2[0] *= temp;
    		input1[0] += input2[0];
    	}else{
    	//Simple addition.
    		input1[0] += input2[0];
    	}
    	return(reduce(input1[0],input1[1]));
    }
    
    public static String multiply(int[] input3, int[] input4, String operator) {
    	if(operator.equals("*")) {
    		input3[0] *= input4[0];
    		input3[1] *= input4[1];
    	}else {
    		//multiplies by the reciprocal for division.
    		input3[0] *= input4[1];
    		input3[1] *= input4[0];
    	}
    	return(reduce(input3[0],input3[1]));
    }
    
    //Modified from original Frac Calc.
    public static String reduce(int numerator, int denominator) {
    	int factor;
    	int whole = 0;
    	if(Math.abs(numerator) >= Math.abs(denominator)) {
			factor = Math.abs(denominator);
			while(denominator % factor !=0 || numerator % factor != 0){
				factor--;
			}
		}else if(numerator == denominator){
			return 1 + "";
		}else if(numerator == 0) {
			return 0 + "";
    	}else if(denominator == 1) {
    		return numerator + "";
    	}else {
			factor = Math.abs(numerator);
			while(Math.abs(denominator) % factor != 0 || Math.abs(numerator) % factor != 0){
				factor--;
			}
		}
    	numerator /= factor;
    	denominator /= factor;
    	whole = numerator / denominator;
    	if(denominator == 1) {
    		return numerator +"";
    	}else if(whole != 0) {
    		if(Math.abs((numerator - denominator * whole)) != 0) {
    			return whole + "_" + Math.abs((numerator - denominator * whole)) + "/" + Math.abs(denominator);
    		}else {
    			return whole + "";
    		}
    	}else{
    		if(denominator < 0 && numerator > 0) {
    			return (numerator * -1) + "/" + Math.abs(denominator);
    		}else {
    			return numerator + "/" + denominator;
    		}
    	}
    }
    //Prints out information about the resulting fraction.
    public String toString() {
		return("whole:" + this.whole + " numerator:" + this.numerator+ " denominator:" + this.denominator);
	}
}
