//Jin Kim
//11/15/17
//2nd Period Dreyer
package fracCalc;
import java.util.*;
public class FracCalc {

	    public static void main(String[] args) 
	    {
	        // TODO: Read the input from the user and call produceAnswer with an equation
	    	Scanner cs = new Scanner(System.in);
	    	do
	    	{
	    	System.out.println("Insert values to be calculated:");
	    	String input = cs.nextLine();
	    	if (input.equalsIgnoreCase("quit"))
	    		break;
	    	System.out.println(produceAnswer(input));
	    	} while(true);
	    	cs.close();
	    }
	    public static String produceAnswer(String input)
	    { 
	    //where all the input values are split into three: whole, numerator, and denominator
	        String[] allTerms = input.split(" "); //split by spaces
	        String firstString = allTerms[0];
	        String sign = allTerms[1];
	        String secondString = allTerms[2];
	    //Converts to integer for calculations; Method at the bottom of the code.  
	        int[] firstTerm = parseInt(firstString);
	        int[] secondTerm = parseInt(secondString);
	        
	        boolean multiOperator = false;
	        if (allTerms.length > 3)
	        	multiOperator = true;
	    //Extra Credit: Makes sure that the fraction is not dividing by zero.
	        if (firstTerm[2] == 0 ||secondTerm[2] == 0)
	        	return "You cannot divide by zero.";
	    //Where the calculations are made
	    //Array set for calculated integers to be stored.    
	        int[] results = {0, 0, 1};
	        int numerator;
	        int denominator;
	        switch (sign)
	        {
	    //Adding fractions
	        	case "+":
	        		if (firstTerm[0] < 0)
	        			numerator = (firstTerm[0] * firstTerm[2] - firstTerm[1]) * secondTerm[2];
	        		else
	        			numerator = (firstTerm[0] * firstTerm[2] + firstTerm[1]) * secondTerm[2];
	        		
	        		if (secondTerm[0] < 0)
	        			numerator += (secondTerm[0] * secondTerm[2] - secondTerm[1]) * firstTerm[2];
	        		else
	        			numerator += (secondTerm[0] * secondTerm[2] + secondTerm[1]) * firstTerm[2];
	        		
	        		denominator = firstTerm[2] * secondTerm[2];
	        		
	        		results[1] = numerator;
	        		results[2] = denominator;
	        		break;
	   //Subtracting fractions
	        	case "-":
	        		if (firstTerm[0] < 0)
	        			numerator = (firstTerm[0] * firstTerm[2] - firstTerm[1]) * secondTerm[2];
	        		else
	        			numerator = (firstTerm[0] * firstTerm[2] + firstTerm[1]) * secondTerm[2];
	        		
	        		if (secondTerm[0] < 0)
	        			numerator -= (secondTerm[0] * secondTerm[2] - secondTerm[1]) * firstTerm[2];
	        		else
	        			numerator -= (secondTerm[0] * secondTerm[2] + secondTerm[1]) * firstTerm[2];
	        		
	        		denominator = firstTerm[2] * secondTerm[2];
	        		
	        		results[1] = numerator;
	        		results[2] = denominator;
	        		break;
	   //Dividing fractions
	        	case "/":
	        		if (firstTerm[0] < 0)
	        			numerator = (firstTerm[0] * firstTerm[2] - firstTerm[1]) * secondTerm[2];
	        		else
	        			numerator = (firstTerm[0] * firstTerm[2] + firstTerm[1]) * secondTerm[2];
	        		
	        		if (secondTerm[0] < 0)
	        			denominator = (secondTerm[0] * secondTerm[2] - secondTerm[1]) * firstTerm[2];
	        		else
	        			denominator = (secondTerm[0] * secondTerm[2] + secondTerm[1]) * firstTerm[2];

	        		results[1] = numerator;
	        		results[2] = denominator;
	        		break;
	   //Multiplying fractions
	        	case "*":
	        		if (firstTerm[0] < 0)
	        			numerator = firstTerm[0] * firstTerm[2] - firstTerm[1];
	        		else
	        			numerator = firstTerm[0] * firstTerm[2] + firstTerm[1];
	        		
	        		if (secondTerm[0] < 0)
	        			numerator *= secondTerm[0] * secondTerm[2] - secondTerm[1];
	        		else
	        			numerator *= secondTerm[0] * secondTerm[2] + secondTerm[1];
	        		
	        		denominator = firstTerm[2] * secondTerm[2];
	        		
	        		results[1] = numerator;
	        		results[2] = denominator;
	        		break;
	   //Extra Credit: Rejects other forms  
	        	default:
	        		return "Invalid Form, please start again.";
	        }
	   //Reduces fraction for final answer, then reformatted for the final answer to be returned
	        reduceAnswer(results);
	        String finalAnswer = reformatAnswer(results);
	        
	        if (multiOperator) {
	        	String temp = finalAnswer;
	        	for(int i = 4; i < allTerms.length; i += 2)
	        		temp += " " + allTerms[i - 1] + " " + allTerms[i];
	        	finalAnswer = produceAnswer(temp);
	        }
	        
	        return finalAnswer;
	    }	
//Changes the numbers to its most simple form
	    public static void reduceAnswer(int[] arr)
	    {
	    	if (arr[2] < 0)
	    	{
	    		arr[1] *= -1;
	    		arr[2] *= -1;
	    	}
	    	
	    	arr[0] = arr[1] / arr[2];
	    	arr[1] %= arr[2];
	    	
	    	int gcf = gcf(arr[1], arr[2]);
	    	arr[1] /= gcf;
	    	arr[2] /= gcf;
	    	
	    	if (arr[0] < 0 && arr[1] < 0)
	    		arr[1] *= -1;
	    }
//Changes answer for final result  
	    public static String reformatAnswer(int[] arr)
	    {
	    	String input = arr[0] + "_" + arr[1] + "/" + arr[2];

	    	if (input.startsWith("0_"))
	        	input = input.substring(2);
	    	
	    	if (input.indexOf("_0/") > 0)
	    		input = input.substring(0, input.indexOf("_0/"));
	    	else if (input.indexOf("0/") == 0)
	    		input = "0";
	    	
	    	if (input.endsWith("/1"))
	    		input = input.substring(0, input.length() - 2);
	    	
	    	return input;
	    }
//From math calculator, to determine the greatest common factor for calculations
	    public static int gcf(int operand1, int operand2) {
			int initial;
			operand1 = Math.abs(operand1);
			operand2 = Math.abs(operand2);
			for(initial = operand2; !(isDivisibleBy(operand2, initial) && isDivisibleBy(operand1, initial)); initial--) {}
			return initial;
		}
//From math calculator
	    public static boolean isDivisibleBy(int dividend, int divisor) {
	    	//Cannot divide by zero.
			if(divisor == 0) {
				throw new IllegalArgumentException();
			}
	    	if(dividend % divisor == 0) {
				return true;
			} else {
				return false;
			}
			
		}
//Converts String to Integer
public static int[] parseInt(String input)
{
	int whole = 0;
    int numerator = 0;
    int denominator = 1;
    if (input.indexOf('_') >= 0)
    {
    	whole = Integer.parseInt(input.substring(0, input.indexOf('_')));
    	numerator = Integer.parseInt(input.substring(input.indexOf('_') + 1, input.indexOf('/')));
    	denominator = Integer.parseInt(input.substring(input.indexOf('/') + 1));
    }
    else if (input.indexOf('/') >= 0)
    {
    	numerator = Integer.parseInt(input.substring(0, input.indexOf('/')));
    	denominator = Integer.parseInt(input.substring(input.indexOf('/') + 1));
    }
    else
    	whole = Integer.parseInt(input);
    int[] arr = {whole, numerator, denominator};
    return arr;
	}
}
